<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:cloud="http://schema.cloudfoundry.org/spring"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd
		http://schema.cloudfoundry.org/spring http://schema.cloudfoundry.org/spring/cloudfoundry-spring-0.7.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="pl.edu.agh.iosr" />
	
	
	
	<!-- RabbitMQ -->
	
	<!-- Obtain a connection to the RabbitMQ via cloudfoundry-runtime: -->
	<cloud:rabbit-connection-factory id="connectionFactory"/>
	
	<!-- Set up the AmqpTemplate/RabbitTemplate: -->
	<rabbit:template exchange="stock-broker" connection-factory="connectionFactory"/>
	
	<!-- Request that queues, exchanges and bindings be automatically
	     declared on the broker: -->
	<rabbit:admin connection-factory="connectionFactory" />
	
	<!--=========== QUEUE CONFIGURATION ===========-->

    <!-- separate queues for tenants - example -->
    <!--DUMMY TENANT NAMES-->
    <!--TODO: programatically configurable ????-->
	<rabbit:queue name="AGH"/>
	<rabbit:queue name="UJ"/>
	<rabbit:queue name="PK"/>

    <!--key = stock index-->
    <!--example: wig, wig20, dow.jones, dax-->
	<rabbit:direct-exchange name="stock-broker">
		<rabbit:bindings>
            <!--queue for tenant: AGH-->
			<rabbit:binding queue="AGH" key="wig"/>
            <rabbit:binding queue="AGH" key="wig20"/>
            <rabbit:binding queue="AGH" key="dow.jones"/>

            <!--queue tenant: UJ-->
            <rabbit:binding queue="UJ" key="dow.jones"/>
            <rabbit:binding queue="UJ" key="dax"/>

            <!--queue tenant: PK-->
            <rabbit:binding queue="PK" key="wig20"/>
            <rabbit:binding queue="PK" key="dow.jones"/>
		</rabbit:bindings>
	</rabbit:direct-exchange>

</beans:beans>
